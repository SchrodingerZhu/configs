
# Description: Allows snap-update-ns to construct the mount namespace specific
# to a particular snap (see the name below). This specifically includes the
# precise locations of the layout elements.

# vim:syntax=apparmor

#include <tunables/global>

profile snap-update-ns.clash flags=(attach_disconnected, complain) {
  # The next four rules mirror those above. We want to be able to read
  # and map snap-update-ns into memory but it may come from a variety of places.
  /usr/lib{,exec,64}/snapd/snap-update-ns mr,
  /var/lib/snapd/hostfs/usr/lib{,exec,64}/snapd/snap-update-ns mr,
  /{,var/lib/snapd/}snap/{core,snapd}/*/usr/lib/snapd/snap-update-ns mr,
  /var/lib/snapd/hostfs/{,var/lib/snapd/}snap/core/*/usr/lib/snapd/snap-update-ns mr,

  # Allow reading the dynamic linker cache.
  /etc/ld.so.cache r,
  # Allow reading, mapping and executing the dynamic linker.
  /{,usr/}lib{,32,64,x32}/{,@{multiarch}/}ld-*.so mrix,
  # Allow reading and mapping various parts of the standard library and
  # dynamically loaded nss modules and what not.
  /{,usr/}lib{,32,64,x32}/{,@{multiarch}/}libc{,-[0-9]*}.so* mr,
  /{,usr/}lib{,32,64,x32}/{,@{multiarch}/}libpthread{,-[0-9]*}.so* mr,

  # Common devices accesses
  /dev/null rw,
  /dev/full rw,
  /dev/zero rw,
  /dev/random r,
  /dev/urandom r,

  # golang runtime variables
  /sys/kernel/mm/transparent_hugepage/hpage_pmd_size r,

  # Allow access to the uuidd daemon (this daemon is a thin wrapper around
  # time and getrandom()/{,u}random and, when available, runs under an
  # unprivilged, dedicated user).
  /run/uuidd/request r,

  # Allow reading the command line (snap-update-ns uses it in pre-Go bootstrap code).
  @{PROC}/@{pid}/cmdline r,

  # Allow reading file descriptor paths
  @{PROC}/@{pid}/fd/* r,
  # Allow reading /proc/version. For release.go WSL detection.
  @{PROC}/version r,

  # Allow reading somaxconn, required in newer distro releases
  @{PROC}/sys/net/core/somaxconn r,
  # but silence noisy denial of inet/inet6
  deny network inet,
  deny network inet6,

  # Allow reading the os-release file (possibly a symlink to /usr/lib).
  /{etc/,usr/lib/}os-release r,

  # Allow creating/grabbing global and per-snap lock files.
  /run/snapd/lock/clash.lock rwk,
  /run/snapd/lock/.lock rwk,

  # Allow reading stored mount namespaces,
  /run/snapd/ns/ r,
  /run/snapd/ns/clash.mnt r,

  # Allow reading per-snap desired mount profiles. Those are written by
  # snapd and represent the desired layout and content connections.
  /var/lib/snapd/mount/snap.clash.fstab r,
  /var/lib/snapd/mount/snap.clash.user-fstab r,

  # Allow reading and writing actual per-snap mount profiles. Note that
  # the wildcard in the rule to allow an atomic write + rename strategy.
  # Those files are written by snap-update-ns and represent the actual
  # mount profile at a given moment.
  /run/snapd/ns/snap.clash.fstab{,.*} rw,

  # NOTE: at this stage the /snap directory is stable as we have called
  # pivot_root already.

  # Needed to perform mount/unmounts.
  capability sys_admin,
  # Needed for mimic construction.
  capability chown,
  # Needed for dropping to calling user when processing per-user mounts
  capability setuid,
  capability setgid,
  # Allow snap-update-ns to override file ownership and permission checks.
  # This is required because writable mimics now preserve the permissions
  # of the original and hence we may be asked to create a directory when the
  # parent is a tmpfs without DAC write access.
  capability dac_override,

  # Allow freezing and thawing the per-snap cgroup freezers
  /sys/fs/cgroup/freezer/snap.clash/freezer.state rw,

  # Allow the content interface to bind fonts from the host filesystem
  mount options=(ro bind) /var/lib/snapd/hostfs/usr/share/fonts/ -> /snap/clash/*/**,
  mount options=(rw private) -> /snap/clash/*/**,
  umount /snap/clash/*/**,

  # set up user mount namespace
  mount options=(rslave) -> /,

  # Allow traversing from the root directory and several well-known places.
  # Specific directory permissions are added by snippets below.
  / r,
  /etc/ r,
  /snap/ r,
  /tmp/ r,
  /usr/ r,
  /var/ r,
  /var/snap/ r,

  # Allow reading timezone data.
  /usr/share/zoneinfo/** r,

  # Don't allow anyone to touch /snap/bin
  audit deny mount /snap/bin/** -> /**,
  audit deny mount /** -> /snap/bin/**,

  # Don't allow bind mounts to /media which has special
  # sharing and propagates mount events outside of the snap namespace.
  audit deny mount -> /media,

  # Allow receiving signals from unconfined (eg, systemd)
  signal (receive) peer=unconfined,
  # Allow sending and receiving signals from ourselves.
  signal peer=@{profile_name},

  # Commonly needed permissions for writable mimics.
  /tmp/ r,
  /tmp/.snap/{,**} rw,

  # Layout /usr/nix: bind $SNAP/usr/nix

  mount options=(rbind, rw) /snap/clash/377/usr/nix/ -> /usr/nix/,

  mount options=(rprivate) -> /usr/nix/,

  umount /usr/nix/,

  # Writable mimic /usr

  # .. permissions for traversing the prefix that is assumed to exist

  / r,

  # .. variant with mimic at /usr/

  # Allow reading the mimic directory, it must exist in the first place.

  /usr/ r,

  # Allow setting the read-only directory aside via a bind mount.

  /tmp/.snap/usr/ rw,

  mount options=(rbind, rw) /usr/ -> /tmp/.snap/usr/,

  # Allow mounting tmpfs over the read-only directory.

  mount fstype=tmpfs options=(rw) tmpfs -> /usr/,

  # Allow creating empty files and directories for bind mounting things
  # to reconstruct the now-writable parent directory.

  /tmp/.snap/usr/*/ rw,

  /usr/*/ rw,

  mount options=(rbind, rw) /tmp/.snap/usr/*/ -> /usr/*/,

  /tmp/.snap/usr/* rw,

  /usr/* rw,

  mount options=(bind, rw) /tmp/.snap/usr/* -> /usr/*,

  # Allow unmounting the auxiliary directory.
  # TODO: use fstype=tmpfs here for more strictness (LP: #1613403)

  mount options=(rprivate) -> /tmp/.snap/usr/,

  umount /tmp/.snap/usr/,

  # Allow unmounting the destination directory as well as anything
  # inside.  This lets us perform the undo plan in case the writable
  # mimic fails.

  mount options=(rprivate) -> /usr/,

  mount options=(rprivate) -> /usr/*,

  mount options=(rprivate) -> /usr/*/,

  umount /usr/,

  umount /usr/*,

  umount /usr/*/,

  # Writable mimic /snap/clash/377/usr

  /snap/ r,

  /snap/clash/ r,

  # .. variant with mimic at /snap/clash/377/

  /snap/clash/377/ r,

  /tmp/.snap/snap/clash/377/ rw,

  mount options=(rbind, rw) /snap/clash/377/ -> /tmp/.snap/snap/clash/377/,

  mount fstype=tmpfs options=(rw) tmpfs -> /snap/clash/377/,

  /tmp/.snap/snap/clash/377/*/ rw,

  /snap/clash/377/*/ rw,

  mount options=(rbind, rw) /tmp/.snap/snap/clash/377/*/ -> /snap/clash/377/*/,

  /tmp/.snap/snap/clash/377/* rw,

  /snap/clash/377/* rw,

  mount options=(bind, rw) /tmp/.snap/snap/clash/377/* -> /snap/clash/377/*,

  mount options=(rprivate) -> /tmp/.snap/snap/clash/377/,

  umount /tmp/.snap/snap/clash/377/,

  mount options=(rprivate) -> /snap/clash/377/,

  mount options=(rprivate) -> /snap/clash/377/*,

  mount options=(rprivate) -> /snap/clash/377/*/,

  umount /snap/clash/377/,

  umount /snap/clash/377/*,

  umount /snap/clash/377/*/,

  # .. variant with mimic at /snap/clash/377/usr/

  /snap/clash/377/usr/ r,

  /tmp/.snap/snap/clash/377/usr/ rw,

  mount options=(rbind, rw) /snap/clash/377/usr/ -> /tmp/.snap/snap/clash/377/usr/,

  mount fstype=tmpfs options=(rw) tmpfs -> /snap/clash/377/usr/,

  /tmp/.snap/snap/clash/377/usr/*/ rw,

  /snap/clash/377/usr/*/ rw,

  mount options=(rbind, rw) /tmp/.snap/snap/clash/377/usr/*/ -> /snap/clash/377/usr/*/,

  /tmp/.snap/snap/clash/377/usr/* rw,

  /snap/clash/377/usr/* rw,

  mount options=(bind, rw) /tmp/.snap/snap/clash/377/usr/* -> /snap/clash/377/usr/*,

  mount options=(rprivate) -> /tmp/.snap/snap/clash/377/usr/,

  umount /tmp/.snap/snap/clash/377/usr/,

  mount options=(rprivate) -> /snap/clash/377/usr/,

  mount options=(rprivate) -> /snap/clash/377/usr/*,

  mount options=(rprivate) -> /snap/clash/377/usr/*/,

  umount /snap/clash/377/usr/,

  umount /snap/clash/377/usr/*,

  umount /snap/clash/377/usr/*/,

}
